(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["jsx-runtime"] = {}));
})(this, (function (exports) { 'use strict';

	// packages/shared/ReactSymbols.ts
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	// 表示普通的 React 元素，即通过 JSX 创建的组件或 DOM 元素
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;
	// 表示 Fragment 组件，即 <React.Fragment> 或短语法 <></> 创建的 Fragment
	const REACT_FRAGMENT_TYPE = supportSymbol
	    ? Symbol.for('react.fragment')
	    : 0xeacb;

	// packages/react/src/jsx.ts
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        key,
	        props,
	        ref,
	        type,
	        __mark: 'erxiao'
	    };
	    return element;
	};
	const jsx = (type, config, ...children) => {
	    let key = null;
	    let ref = null;
	    const props = {};
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        if (Object.prototype.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    const maybeChildrenLength = children.length;
	    if (maybeChildrenLength) {
	        if (maybeChildrenLength === 1) {
	            props.children = children[0];
	        }
	        else {
	            props.children = children;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};
	const jsxDEV = (type, config) => {
	    let key = null;
	    let ref = null;
	    const props = {};
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        if (Object.prototype.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};
	const Fragment = REACT_FRAGMENT_TYPE;

	exports.Fragment = Fragment;
	exports.jsx = jsx;
	exports.jsxDEV = jsxDEV;

}));
