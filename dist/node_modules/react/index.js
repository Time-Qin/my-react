(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.React = {}));
})(this, (function (exports) { 'use strict';

    const currentDispatcher = {
        current: null
    };
    const resolveDispatcher = () => {
        const dispatcher = currentDispatcher.current;
        if (dispatcher == null) {
            throw new Error("Hooks 只能在函数组件中执行");
        }
        return dispatcher;
    };

    // packages/shared/ReactSymbols.ts
    const supportSymbol = typeof Symbol === 'function' && Symbol.for;
    // 表示普通的 React 元素，即通过 JSX 创建的组件或 DOM 元素
    const REACT_ELEMENT_TYPE = supportSymbol
        ? Symbol.for('react.element')
        : 0xeac7;

    // packages/react/src/jsx.ts
    const ReactElement = function (type, key, ref, props) {
        const element = {
            $$typeof: REACT_ELEMENT_TYPE,
            key,
            props,
            ref,
            type,
            __mark: 'erxiao'
        };
        return element;
    };
    const jsxDEV = (type, config) => {
        let key = null;
        let ref = null;
        const props = {};
        for (const prop in config) {
            const val = config[prop];
            if (prop === 'key') {
                if (val !== undefined) {
                    key = '' + val;
                }
                continue;
            }
            if (prop === 'ref') {
                if (val !== undefined) {
                    ref = val;
                }
                continue;
            }
            if (Object.prototype.hasOwnProperty.call(config, prop)) {
                props[prop] = val;
            }
        }
        return ReactElement(type, key, ref, props);
    };

    const useState = (initialState) => {
        const dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    };
    const useEffect = (create, deps) => {
        const dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    };
    // 内部数据共享层
    const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
        currentDispatcher
    };
    var index = {
        version: '1.0.0',
        createElement: jsxDEV
    };

    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    exports.default = index;
    exports.useEffect = useEffect;
    exports.useState = useState;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
