(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ReactDOM = {}));
})(this, (function (exports) { 'use strict';

	const FunctionComponent = 0;
	const HostRoot = 3;
	const HostComponent = 5;
	const HostText = 6;
	const Fragment = 7;

	const NoFlags = 0b0000000;
	const Placement = 0b0000010;
	const Update = 0b0000100;
	const ChildDeletion = 0b0001000;
	const MutationMask = Placement | Update | ChildDeletion;

	const NoLane = 0b0000;
	const NoLanes = 0b0000;
	const SynLane = 0b0001;
	// 获取lane的集合
	function mergeLanes(laneA, laneB) {
	    return laneA | laneB;
	}
	// 获取更新的优先级
	function requestUpdateLane() {
	    return SynLane;
	}
	// 获取 lanes 中优先级最高的 lane
	function getHighestPriorityLane(lanes) {
	    return lanes & -lanes;
	}

	class FiberNode {
	    tag;
	    key;
	    stateNode;
	    type;
	    return;
	    sibling;
	    child;
	    index;
	    ref;
	    pendingProps;
	    memoizedProps;
	    memoizedState;
	    alternate;
	    flags;
	    subTreeFlags;
	    updateQueue;
	    deletions;
	    constructor(tag, pendingProps, key) {
	        // 类型
	        this.tag = tag;
	        this.key = key;
	        this.ref = null;
	        this.stateNode = null; // 对应的dom节点或组件实例
	        this.type = null; // 节点类型 可以是函数组件 类组件 原生DOM元素
	        // 构成树状结构
	        this.return = null; // 指向父节点
	        this.sibling = null; // 指向节点的下一个兄弟节点
	        this.child = null; // 指向节点的第一个子节点
	        this.index = 0; // 索引
	        // 作为工作单元
	        this.pendingProps = pendingProps; // 表示节点的新属性，用于在协调过程中进行更新
	        this.memoizedProps = null; // 已经生效的props
	        this.memoizedState = null; // 更新完成后已经生效的状态
	        this.alternate = null; // 指向节点的备份节点，用于在协调过程中进行比较
	        this.flags = NoFlags; // 表示节点的副作用类型，如更新、插入、删除等
	        this.subTreeFlags = NoFlags; // 表示子节点的副作用类型，如更新、插入、删除等
	        this.updateQueue = null; // 表示节点的更新队列
	        this.deletions = null;
	    }
	}
	class FiberRootNode {
	    container;
	    current;
	    finishedWork;
	    peddingLanes;
	    finishedLane;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        // 将根节点的 stateNode 属性指向 FiberRootNode，用于表示整个 React 应用的根节点
	        hostRootFiber.stateNode = this;
	        // 指向更新完成之后的 hostRootFiber
	        this.finishedWork = null;
	        this.peddingLanes = NoLanes;
	        this.finishedLane = NoLane;
	    }
	}
	// 根据 FiberRootNode.current 创建一个新的 workInProgress 节点
	function createWorkInProgress(current, pendingProps) {
	    let workInProgress = current.alternate;
	    if (workInProgress === null) {
	        // mount 首屏渲染时 
	        workInProgress = new FiberNode(current.tag, pendingProps, current.key);
	        workInProgress.stateNode = current.stateNode;
	        // 建立双向关联
	        workInProgress.alternate = current;
	        current.alternate = workInProgress;
	    }
	    else {
	        // update 更新时
	        workInProgress.pendingProps = pendingProps;
	        // 将 effect 链表重置为空，以便在更新过程中记录新的副作用
	        workInProgress.flags = NoFlags;
	        workInProgress.subTreeFlags = NoFlags;
	    }
	    // 复制当前节点的大部分属性
	    workInProgress.type = current.type;
	    workInProgress.updateQueue = current.updateQueue;
	    workInProgress.child = current.child;
	    workInProgress.memoizedProps = current.memoizedProps;
	    workInProgress.memoizedState = current.memoizedState;
	    return workInProgress;
	}
	// 根据 DOM 节点创建新的 Fiber 节点
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        // 原生DOM节点
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('未定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}
	function createFiberFromFragment(elements, key) {
	    const fiber = new FiberNode(Fragment, elements, key);
	    return fiber;
	}

	// 创建Update 实例
	function createUpdate(action, lane) {
	    return {
	        action,
	        next: null,
	        lane
	    };
	}
	// 创建UpdateQueue 实例
	function createUpdateQueue() {
	    return {
	        shared: {
	            pending: null
	        },
	        dispatch: null
	    };
	}
	// 将Update 添加到 UpdateQueue 中
	function enqueueUpdate(updateQueue, update) {
	    const pending = updateQueue.shared.pending;
	    if (pending === null) {
	        update.next = update;
	    }
	    else {
	        update.next = pending.next;
	        pending.next = update;
	    }
	    // pending 指向 update 环状链表的最后一个节点
	    updateQueue.shared.pending = update;
	}
	// 消费UpdateQueue 中的Update
	function processUpdateQueue(baseState, pendingUpdate, renderLane) {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        // 第一个 update
	        let first = pendingUpdate.next;
	        let pending = first;
	        do {
	            const updateLane = pending.lane;
	            if (updateLane === renderLane) {
	                const action = pending.action;
	                if (action instanceof Function) {
	                    // 若 action 是回调函数：
	                    baseState = action(baseState);
	                }
	                else {
	                    // 若 action 是状态值：
	                    baseState = action;
	                }
	            }
	            else {
	                {
	                    console.error('不应该进入 updateLane !== renderLane 逻辑');
	                }
	            }
	            pending = pending.next;
	        } while (pending !== first);
	    }
	    result.memoizedState = baseState;
	    return result;
	}

	const elementPropsKey = '__props';
	function updateFiberProps(node, props) {
	    node[elementPropsKey] = props;
	}
	// 支持的事件类型
	const validEventTypeList = ['click'];
	// 初始化事件
	function initEvent(container, eventType) {
	    if (!validEventTypeList.includes(eventType)) {
	        console.warn('initEvent 未实现的事件类型', eventType);
	        return;
	    }
	    {
	        console.log('初始化事件', eventType);
	    }
	    container.addEventListener(eventType, (e) => {
	        dispatchEvent(container, eventType, e);
	    });
	}
	function dispatchEvent(container, eventType, e) {
	    const targetElement = e.target;
	    if (targetElement === null) {
	        console.warn('事件不存在targetElement', e);
	        return;
	    }
	    // 收集沿途事件
	    const { bubble, capture } = collectPaths(targetElement, container, eventType);
	    // 构造合成事件
	    const syntheticEvent = createSyntheticEvent(e);
	    // 遍历捕获 capture 事件
	    triggerEventFlow(capture, syntheticEvent);
	    // 遍历冒泡 bubble 事件
	    if (!syntheticEvent.__stopPropagation) {
	        triggerEventFlow(bubble, syntheticEvent);
	    }
	}
	function collectPaths(targetElement, container, eventType) {
	    const paths = {
	        bubble: [],
	        capture: []
	    };
	    //收集
	    while (targetElement && targetElement !== container) {
	        const elementProps = targetElement[elementPropsKey];
	        if (elementProps) {
	            const callbackNameList = getEventCallbackNameFromEventType(eventType);
	            if (callbackNameList) {
	                callbackNameList.forEach((callbackName, i) => {
	                    const callback = elementProps[callbackName];
	                    if (callback) {
	                        if (i == 0) {
	                            paths.capture.unshift(callback);
	                        }
	                        else {
	                            paths.bubble.push(callback);
	                        }
	                    }
	                });
	            }
	        }
	        targetElement = targetElement.parentNode;
	    }
	    return paths;
	}
	function getEventCallbackNameFromEventType(eventType) {
	    return {
	        click: ['onClick', 'onClickCapture']
	    }[eventType];
	}
	function createSyntheticEvent(e) {
	    const syntheticEvent = e;
	    syntheticEvent.__stopPropagation = false;
	    const originStopPropagation = e.stopPropagation;
	    syntheticEvent.stopPropagation = () => {
	        syntheticEvent.__stopPropagation = true;
	        if (originStopPropagation) {
	            originStopPropagation();
	        }
	    };
	    return syntheticEvent;
	}
	function triggerEventFlow(paths, syntheticEvent) {
	    for (let i = 0; i < paths.length; i++) {
	        const callback = paths[i];
	        callback.call(null, syntheticEvent);
	        if (syntheticEvent.__stopPropagation) {
	            break;
	        }
	    }
	}

	// 模拟实现构建 DOM 的函数
	// 真实函数要在不同的宿主环境中实现
	const createInstance = (type, props) => {
	    // TODO 处理props
	    const element = document.createElement(type);
	    updateFiberProps(element, props);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    const element = document.createTextNode(content);
	    return element;
	};
	const appendChildToContainer = (child, parent) => {
	    parent.appendChild(child);
	};
	const commitUpdate = (fiber) => {
	    switch (fiber.flags) {
	        case HostComponent:
	            updateFiberProps(fiber.stateNode, fiber.memoizedProps);
	            break;
	        case HostText:
	            const text = fiber.memoizedProps.content;
	            commitTextUpdate(fiber.stateNode, text);
	            break;
	        default:
	            {
	                console.warn('未实现的 commitUpdate 类型', fiber);
	            }
	    }
	};
	const commitTextUpdate = (textInstance, content) => {
	    textInstance.textContent = content;
	};
	const removeChild = (child, container) => {
	    container.removeChild(child);
	};
	const insertChildToContainer = (child, container, before) => {
	    container.insertBefore(child, before);
	};
	const scheduleMicroTask = typeof queueMicrotask === 'function' ? queueMicrotask : typeof Promise === 'function' ? (callback) => Promise.resolve(null).then(callback) : setTimeout;

	let nextEffect = null;
	function commitMutationEffects(finishedWork) {
	    nextEffect = finishedWork;
	    //深度优先遍历fiber树 寻找新的flags
	    while (nextEffect !== null) {
	        const child = nextEffect.child;
	        if ((nextEffect.subTreeFlags & MutationMask) !== NoFlags && child !== null) {
	            // 子节点存在 mutation阶段执行的flags
	            nextEffect = child;
	        }
	        else {
	            // 子节点不存在 mutation 阶段需要执行的 flags 或没有子节点
	            // 向上遍历
	            up: while (nextEffect !== null) {
	                // 处理当前节点的 flags
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    // 有兄弟节点 则遍历兄弟节点
	                    nextEffect = sibling;
	                    break up;
	                }
	                // 否则 向上返回遍历父节点
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	}
	function commitMutationEffectsOnFiber(finishedWork) {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= -3;
	    }
	    if ((flags & Update) !== NoFlags) {
	        // TODO Update
	        commitUpdate(finishedWork);
	        finishedWork.flags &= -5;
	    }
	    if ((flags & ChildDeletion) !== NoFlags) {
	        // TODO ChildDeletion
	        const detetions = finishedWork.deletions;
	        if (detetions !== null) {
	            detetions.forEach((childToDelete) => {
	                commitDeteion(childToDelete);
	            });
	        }
	        finishedWork.flags &= -9;
	    }
	}
	// 执行 DOM 插入操作，将 FiberNode 对应的 DOM 插入 parent DOM 中 或移动 FiberNode 对应的 DOM
	function commitPlacement(finishedWork) {
	    {
	        console.warn('执行Placement操作', finishedWork);
	    }
	    // parent DOM
	    const hostParent = getHostParent(finishedWork);
	    // Host sibling
	    const sibling = getHostSibling(finishedWork);
	    appendPlacementNodeIntoContainer(finishedWork, hostParent, sibling);
	}
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        else {
	            parent = parent.return;
	        }
	    }
	    {
	        console.warn('未找到hostParent');
	    }
	    return null;
	}
	function appendPlacementNodeIntoContainer(finishedWork, hostParent, before) {
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        if (before) {
	            // 执行移动操作
	            insertChildToContainer(finishedWork.stateNode, hostParent, before);
	        }
	        else {
	            //  执行插入操作
	            appendChildToContainer(finishedWork.stateNode, hostParent);
	        }
	    }
	    else {
	        const child = finishedWork.child;
	        if (child !== null) {
	            appendPlacementNodeIntoContainer(child, hostParent);
	            let sibling = child.sibling;
	            while (sibling !== null) {
	                appendPlacementNodeIntoContainer(sibling, hostParent);
	                sibling = sibling.sibling;
	            }
	        }
	    }
	}
	// 删除节点及其子树
	function commitDeteion(childToDelete) {
	    {
	        console.log('执行 Deletion 操作', childToDelete);
	    }
	    // 子树的根节点
	    let rootChildrenToDelete = [];
	    commitNestedUnmounts(childToDelete, (unmountFiber) => {
	        switch (unmountFiber.flags) {
	            case HostComponent:
	                recordChildrenToDelete(rootChildrenToDelete, unmountFiber);
	                //TODO 解绑ref
	                return;
	            case HostText:
	                recordChildrenToDelete(rootChildrenToDelete, unmountFiber);
	                return;
	            case FunctionComponent:
	                //TODO useEffect unmount
	                return;
	            default:
	                {
	                    console.warn('未实现的 delete 类型', unmountFiber);
	                }
	        }
	    });
	    // 移除rootHostNode 的DOM
	    if (rootChildrenToDelete.length !== 0) {
	        // 找到待删除子树的根节点的 parent DOM
	        const hostParent = getHostParent(childToDelete);
	        rootChildrenToDelete.forEach((node) => {
	            removeChild(node.stateNode, hostParent);
	        });
	    }
	    childToDelete.return = null;
	    childToDelete.child = null;
	}
	function recordChildrenToDelete(childrenToDelete, unmountFiber) {
	    const lastOne = childrenToDelete[childrenToDelete.length - 1];
	    if (!lastOne) {
	        childrenToDelete.push(unmountFiber);
	    }
	    else {
	        let node = lastOne.sibling;
	        while (node !== null) {
	            if (unmountFiber == node) {
	                childrenToDelete.push(unmountFiber);
	            }
	            node = node.sibling;
	        }
	    }
	}
	// 深度优先遍历 Fiber 树，执行 onCommitUnmount
	const commitNestedUnmounts = (root, onCommitUnmount) => {
	    let node = root;
	    while (true) {
	        onCommitUnmount(node);
	        // 向下遍历，递
	        if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        // 终止条件
	        if (node == root)
	            return;
	        // 向上遍历，归
	        while (node.sibling === null) {
	            if (node.return == null || node.return === root)
	                return;
	            node = node.return;
	        }
	        node.sibling.child = node.return;
	        node = node.sibling;
	    }
	};
	// 获取兄弟 Host 节点
	function getHostSibling(fiber) {
	    let node = fiber;
	    findSibling: while (true) {
	        // 没有兄弟节点时，向上遍历
	        while (node.sibling == null) {
	            const parent = node.return;
	            if (parent == null || parent.tag === HostComponent || parent.tag === HostRoot) {
	                return null;
	            }
	            node = parent;
	        }
	        // 向下遍历
	        node.sibling.return = node.return;
	        node = node.sibling;
	        while (node.tag !== HostText && node.tag !== HostComponent) {
	            // 不稳定的 Host 节点不能作为目标兄弟 Host 节点
	            if ((node.flags & Placement) !== NoFlags) {
	                continue findSibling;
	            }
	            if (node.child === null) {
	                continue findSibling;
	            }
	            else {
	                node.child.return = node;
	                node = node.child;
	            }
	        }
	        if ((node.flags & Placement) == NoFlags) {
	            return node.stateNode;
	        }
	    }
	}

	// packages/shared/ReactSymbols.ts
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	// 表示普通的 React 元素，即通过 JSX 创建的组件或 DOM 元素
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;
	// 表示 Fragment 组件，即 <React.Fragment> 或短语法 <></> 创建的 Fragment
	const REACT_FRAGMENT_TYPE = supportSymbol
	    ? Symbol.for('react.fragment')
	    : 0xeacb;

	function ChildReconciler(shouldTrackSideEffects) {
	    // 处理单个 Element 节点的情况
	    // 对比 currentFiber 与 ReactElement，生成 workInProgress FiberNode
	    function reconcilerSingleElement(returnFiber, currentFiber, element) {
	        //组件更新阶段
	        while (currentFiber !== null) {
	            if (currentFiber.key == element.key) {
	                if (element.$$typeof === REACT_ELEMENT_TYPE) {
	                    if (currentFiber.type === element.type) {
	                        // key 和 type 都相同，复用旧的 Fiber 节点
	                        // 处理 Fragment 的情况
	                        let props = element.props;
	                        if (element.type === REACT_FRAGMENT_TYPE) {
	                            props = element.props.children;
	                        }
	                        const existing = useFiber(currentFiber, props);
	                        existing.return = currentFiber;
	                        // 剩下的兄弟节点标记删除
	                        deleteRemainingChildren(returnFiber, currentFiber.sibling);
	                        return existing;
	                    }
	                    // key 相同，但 type 不同，删除所有旧的 Fiber 节点
	                    deleteRemainingChildren(returnFiber, currentFiber.sibling);
	                    break;
	                    // deleteChild(returnFiber, currentFiber)
	                }
	                else {
	                    {
	                        console.warn('还未实现的 React 类型', element);
	                        break;
	                    }
	                }
	            }
	            else {
	                // key 相同，但 type 不同，删除当前旧的 Fiber 节点，继续遍历兄弟节点
	                deleteChild(returnFiber, currentFiber);
	                currentFiber = currentFiber.sibling;
	            }
	        }
	        // 创建新的 Fiber 节点
	        let fiber;
	        if (element.type === REACT_FRAGMENT_TYPE) {
	            fiber = createFiberFromFragment(element.props.children, element.key);
	        }
	        else {
	            fiber = createFiberFromElement(element);
	        }
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    // 处理文本节点的情况
	    // 对比 currentFiber 与 ReactElement，生成 workInProgress FiberNode
	    function reconcilerSingleTextNode(returnFiber, currentFiber, content) {
	        while (currentFiber !== null) {
	            // 组件的更新阶段
	            if (currentFiber.tag === HostText) {
	                // 复用旧的 Fiber 节点
	                const existing = useFiber(currentFiber, { content });
	                existing.return = currentFiber;
	                // 剩下的兄弟节点标记删除
	                deleteRemainingChildren(returnFiber, currentFiber.sibling);
	                return existing;
	            }
	            else {
	                // 删除旧的 Fiber 节点
	                deleteChild(returnFiber, currentFiber);
	                currentFiber = currentFiber.sibling;
	            }
	        }
	        // 创建新的 Fiber 节点
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    // 处理多个 Element 节点的情况
	    function reconcileChildArray(returnFiber, currentFirstChild, newChild) {
	        // 最后一个可复用 Fiber 在 current 中的 index
	        let lastPlacedIndex = 0;
	        // 创建的第一个新 Fiber
	        let firstNewFiber = null;
	        // 创建的最后一个新 Fiber
	        let lastNewFiber = null;
	        // 1. 保存同级节点信息
	        let existingChildren = new Map();
	        let current = currentFirstChild;
	        while (current !== null) {
	            const keyToUse = current.key !== null ? current.key : current.index.toString();
	            existingChildren.set(keyToUse, current);
	            current = current.sibling;
	        }
	        // 2. 遍历新节点数组，判断是否可复用
	        for (let i = 0; i < newChild.length; i++) {
	            const after = newChild[i];
	            const newFiber = updateFromMap(returnFiber, existingChildren, i, after);
	            if (newFiber === null)
	                continue;
	            // 3. 标记插入或移动操作
	            newFiber.index = i;
	            newFiber.return = returnFiber;
	            if (lastNewFiber == null) {
	                firstNewFiber = newFiber;
	                lastNewFiber = newFiber;
	            }
	            else {
	                lastNewFiber.sibling = newFiber;
	                lastNewFiber = lastNewFiber.sibling;
	            }
	            if (!shouldTrackSideEffects)
	                continue;
	            const current = newFiber.alternate;
	            if (current !== null) {
	                const oldIndex = current.index;
	                if (oldIndex < lastPlacedIndex) {
	                    // 标记移动
	                    newFiber.flags |= Placement;
	                    continue;
	                }
	                else {
	                    // 不移动
	                    lastPlacedIndex = oldIndex;
	                }
	            }
	            else {
	                // 首屏渲染阶段，标记插入
	                newFiber.flags |= Placement;
	            }
	        }
	        // 4. 标记删除
	        existingChildren.forEach((fiber) => {
	            deleteChild(returnFiber, fiber);
	        });
	        return firstNewFiber;
	    }
	    function updateFromMap(returnFiber, existingChildren, index, element) {
	        const keyToUse = element.key !== null ? element.key : index.toString();
	        const before = existingChildren.get(keyToUse);
	        // HostText
	        if (typeof element === 'string' || typeof element === 'number') {
	            // 可复用 复用旧的 Fiber 节点
	            if (before && before.tag === HostText) {
	                existingChildren.delete(keyToUse);
	                return useFiber(before, { content: element + '' });
	            }
	            // 不可复用 创建新的 Fiber 节点
	            return new FiberNode(HostText, { content: element + '' }, null);
	        }
	        // HostComponent
	        if (typeof element === 'object' && element !== null) {
	            switch (element.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    if (element.type == REACT_FRAGMENT_TYPE) {
	                        return updateFragment(returnFiber, before, element, keyToUse, existingChildren);
	                    }
	                    // 可复用 复用旧的 Fiber 节点
	                    if (before && before.type === element.type) {
	                        existingChildren.delete(keyToUse);
	                        return useFiber(before, element.props);
	                    }
	                    // 不可复用 创建新的 Fiber 节点
	                    return createFiberFromElement(element);
	            }
	        }
	        // 数组类型的element，如：<ul>{[<li/>, <li/>]}</ul>
	        if (Array.isArray(element)) {
	            return updateFragment(returnFiber, before, element, keyToUse, existingChildren);
	        }
	        return null;
	    }
	    // 复用或新建 Fragment
	    function updateFragment(returnFiber, current, elements, key, existingChildren) {
	        let fiber;
	        if (!current || current.tag !== Fragment) {
	            fiber = createFiberFromFragment(elements, key);
	        }
	        else {
	            existingChildren.delete(key);
	            fiber = useFiber(current, elements);
	        }
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    // 复用 Fiber 节点
	    function useFiber(fiber, pendingProps) {
	        const clone = createWorkInProgress(fiber, pendingProps);
	        clone.index = 0;
	        clone.sibling = null;
	        return clone;
	    }
	    // 从父节点中删除指定的子节点
	    function deleteChild(returnFiber, childToDelete) {
	        if (!shouldTrackSideEffects) {
	            return;
	        }
	        const deletions = returnFiber.deletions;
	        if (deletions == null) {
	            returnFiber.deletions = [childToDelete];
	            returnFiber.flags |= ChildDeletion;
	        }
	        else {
	            deletions.push(childToDelete);
	        }
	    }
	    // 删除当前节点的所有兄弟节点
	    function deleteRemainingChildren(returnFiber, currentFirstChild) {
	        if (!shouldTrackSideEffects)
	            return;
	        let childToDelete = currentFirstChild;
	        while (childToDelete !== null) {
	            deleteChild(returnFiber, childToDelete);
	            childToDelete = childToDelete.sibling;
	        }
	    }
	    // 为 Fiber 节点添加更新 flags
	    function placeSingleChild(fiber) {
	        if (shouldTrackSideEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    // 闭包，根据 shouldTrackSideEffects 返回不同 reconcileChildFibers 的实现
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        // 判断 Fragment
	        const isUnKeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
	        if (isUnKeyedTopLevelFragment) {
	            newChild = newChild?.props.children;
	        }
	        // 判断当前 fiber 的类型
	        if (typeof newChild === 'object' && newChild !== null) {
	            // 多个 Element 节点
	            if (Array.isArray(newChild)) {
	                return reconcileChildArray(returnFiber, currentFiber, newChild);
	            }
	            // 单个 Element 节点
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcilerSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	                    break;
	            }
	        }
	        // 文本节点
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcilerSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        {
	            console.warn('未实现的 reconcile 类型', newChild);
	        }
	        return null;
	    };
	}
	// 组件的更新阶段中，追踪副作用
	const reconcileChildFibers = ChildReconciler(true);
	// 首屏渲染阶段中不追踪副作用，只对根节点执行一次 DOM 插入操作
	const mountChildFibers = ChildReconciler(false);

	// 执行组件中的函数
	function renderWithHooks(workInProgress, lane) {
	    //重置
	    workInProgress.memoizedState = null;
	    //判断Hooks 被调用的时机
	    workInProgress.alternate;
	    // 函数保存在 type 字段中
	    const Component = workInProgress.type;
	    const props = workInProgress.pendingProps;
	    const child = Component(props);
	    return child;
	}

	// 比较并返回子 FiberNode
	function beginWork(workInProgress, renderLane) {
	    switch (workInProgress.tag) {
	        case HostRoot:
	            return updateHostRoot(workInProgress, renderLane);
	        case HostComponent:
	            return updateHostComponent$1(workInProgress);
	        case FunctionComponent:
	            return updateFunctionComponent(workInProgress);
	        case Fragment:
	            return updateFragment(workInProgress);
	        case HostText:
	            return updateHostText$1();
	        default:
	            {
	                console.warn('beginWork 未实现的类型', workInProgress.tag);
	            }
	            break;
	    }
	}
	function updateHostRoot(workInProgress, renderLane) {
	    // 根据当前节点和工作中节点的状态进行比较，处理属性等更新逻辑
	    const baseState = workInProgress.memoizedState;
	    const updateQueue = workInProgress.updateQueue;
	    const pending = updateQueue.shared.pending;
	    // 清空任务栈
	    updateQueue.shared.pending = null;
	    // 计算待更新状态的最新值
	    const { memoizedState } = processUpdateQueue(baseState, pending, renderLane);
	    workInProgress.memoizedState = memoizedState;
	    //处理字节点的更新逻辑
	    const nextChildren = workInProgress.memoizedState;
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	}
	function updateHostComponent$1(workInProgress) {
	    const nextProps = workInProgress.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	}
	function updateFunctionComponent(workInProgress, renderLane) {
	    const nextChildren = renderWithHooks(workInProgress);
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	}
	function updateFragment(workInProgress) {
	    const nextChildren = workInProgress.pendingProps;
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	}
	function updateHostText$1() {
	    return null;
	}
	// 对比子节点的 current FiberNode 与 子节点的 ReactElement
	// 生成子节点对应的 workInProgress FiberNode
	function reconcileChildren(workInProgress, children) {
	    // alternate 指向节点的备份节点，即 current
	    const current = workInProgress.alternate;
	    if (current !== null) {
	        // update
	        workInProgress.child = reconcileChildFibers(workInProgress, current?.child, children);
	    }
	    else {
	        // mount
	        workInProgress.child = mountChildFibers(workInProgress, null, children);
	    }
	}

	// 生成更新计划，计算和收集更新 flags
	function completeWork(workInProgress) {
	    const newProps = workInProgress.pendingProps;
	    const current = workInProgress.alternate;
	    switch (workInProgress.tag) {
	        case HostRoot:
	        case FunctionComponent:
	            bubbleProperties(workInProgress);
	            return null;
	        case HostComponent:
	            if (current !== null && workInProgress.stateNode !== null) {
	                updateHostComponent(current, workInProgress);
	            }
	            else {
	                // 首屏渲染阶段
	                // 1.构建DOM
	                const instance = createInstance(workInProgress.type, newProps);
	                // 2.将DOM插入到DOM树中
	                appendAllChildren(instance, workInProgress);
	                workInProgress.stateNode = instance;
	            }
	            bubbleProperties(workInProgress);
	            return null;
	        case Fragment:
	            bubbleProperties(workInProgress);
	            return null;
	        case HostText:
	            if (current !== null && workInProgress.stateNode !== null) {
	                updateHostText(current, workInProgress);
	            }
	            else {
	                // 首屏渲染阶段
	                // 1.构建DOM
	                const instance = createTextInstance(newProps.content);
	                workInProgress.stateNode = instance;
	            }
	            bubbleProperties(workInProgress);
	            return null;
	        default:
	            {
	                console.warn('未实现的completeWork情况', workInProgress);
	            }
	            break;
	    }
	}
	function appendAllChildren(parent, workInProgress) {
	    let node = workInProgress.child;
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            // 处理原生 DOM 元素节点或文本节点
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            // 递归处理其他类型的组件节点的子节点
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === workInProgress) {
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === workInProgress) {
	                return;
	            }
	            node = node.return;
	        }
	        // 处理下一个兄弟节点
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	// 收集更新 flags，将子 FiberNode 的 flags 冒泡到父 FiberNode 上
	function bubbleProperties(workInProgress) {
	    let subTreeFlags = NoFlags;
	    let child = workInProgress.child;
	    while (child !== null) {
	        subTreeFlags |= child.subTreeFlags;
	        subTreeFlags |= child.flags;
	        child.return = workInProgress;
	        child = child.sibling;
	    }
	    workInProgress.subTreeFlags |= subTreeFlags;
	}
	function updateHostComponent(current, workInProgress) {
	    markUpdate(workInProgress);
	}
	function updateHostText(current, workInProgress) {
	    const oldText = current.memoizedProps.content;
	    const newText = workInProgress.pendingProps.content;
	    if (oldText !== newText) {
	        markUpdate(workInProgress);
	    }
	}
	// 为 Fiber 节点增加 Update flags
	function markUpdate(workInProgress) {
	    workInProgress.flags |= Update;
	}

	// 同步的任务队列
	let syncQueue = null;
	let isFlushingSyncQueue = false;
	// 调度同步任务
	function scheduleSyncCallback(callback) {
	    if (syncQueue === null) {
	        syncQueue = [callback];
	    }
	    else {
	        syncQueue.push(callback);
	    }
	}
	//遍历执行同步的回调函数
	function flushSyncCallback() {
	    if (!isFlushingSyncQueue && syncQueue) {
	        isFlushingSyncQueue = true;
	        try {
	            syncQueue.forEach((callback) => callback());
	        }
	        catch (e) {
	            {
	                console.warn('flushSyncCallback发生错误', e);
	            }
	        }
	        finally {
	            isFlushingSyncQueue = false;
	            syncQueue = null;
	        }
	    }
	}

	let workInProgress = null;
	let workInProgressRenderLane;
	function renderRoot(root, lane) {
	    // 初始化 workInProgress 变量
	    prepareFreshStack(root, lane);
	    do {
	        try {
	            // 深度优先遍历
	            workLoop();
	            break;
	        }
	        catch (error) {
	            console.warn('workLoop发生错误', error);
	            workInProgress = null;
	        }
	    } while (true);
	    // 创建根 Fiber 树的 Root Fiber
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    root.finishedLane = lane;
	    workInProgressRenderLane = NoLane;
	    // 提交更新
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('开始提交阶段', finishedWork);
	    }
	    // 重置
	    root.finishedWork = null;
	    // 判断是否存在 3 个子阶段需要执行的操作
	    const subtreeHasEffect = (finishedWork.subTreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        // TODO beforeMutation
	        commitMutationEffects(finishedWork);
	        // Fiber 树切换，workInProgress 变成 current
	        root.current = finishedWork;
	        // TODO layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	// 初始化 workInProgress 变量
	function prepareFreshStack(root, lane) {
	    workInProgress = createWorkInProgress(root.current, {});
	    workInProgressRenderLane = lane;
	}
	//深度优先遍历，向下递归子节点
	function workLoop() {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    // 比较并返回子fiberNode
	    const next = beginWork(fiber, workInProgressRenderLane);
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next == null) {
	        // 没有子节点 则向上返回
	        completeUnitOfWork(fiber);
	    }
	    else {
	        // 有子节点 则向下深度遍历
	        workInProgress = next;
	    }
	}
	// 深度优先遍历，向下递归子节点
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        //生成更新计划
	        completeWork(node);
	        // 有兄弟节点 则遍历兄弟节点
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        // 否则 向上返回遍历父节点
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}
	//调度功能
	function scheduleUpdateOnFiber(fiber, lane) {
	    const root = markUpdateFromFiberToRoot(fiber);
	    markRootUpdated(root, lane);
	    ensureRootIsScheduled(root);
	}
	// 从触发更新的节点向上遍历到 FiberRootNode
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    while (node.return !== null) {
	        node = node.return;
	    }
	    if (node.tag == HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	// 将更新的优先级(lane)记录到根节点上
	function markRootUpdated(root, lane) {
	    root.peddingLanes = mergeLanes(root.peddingLanes, lane);
	}
	// Scheduler 调度功能
	function ensureRootIsScheduled(root) {
	    const updateLane = getHighestPriorityLane(root.peddingLanes);
	    if (updateLane == NoLane)
	        return;
	    if (updateLane == SynLane) {
	        // 同步优先级 用微任务调用
	        scheduleSyncCallback(renderRoot.bind(null, root, updateLane));
	        scheduleMicroTask(flushSyncCallback);
	    }
	}

	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    const lane = requestUpdateLane();
	    const update = createUpdate(element, lane);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber, lane);
	    return element;
	}

	// 实现 ReactDOM.createRoot(root).render(<App />);
	function createRoot$1(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            initEvent(container, 'click');
	            updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot$1
	});

	const createRoot = createRoot$1;

	exports.createRoot = createRoot;
	exports.default = ReactDOM;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
