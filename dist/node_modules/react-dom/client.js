(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.client = factory());
})(this, (function () { 'use strict';

	const FunctionComponent = 0;
	const HostRoot = 3;
	const HostComponent = 5;
	const HostText = 6;

	const NoFlags = 0b0000000;
	const Placement = 0b0000010;
	const Update = 0b0000100;
	const ChildDeletion = 0b0001000;
	const MutationMask = Placement | Update | ChildDeletion;

	class FiberNode {
	    tag;
	    key;
	    stateNode;
	    type;
	    return;
	    sibling;
	    child;
	    index;
	    ref;
	    pendingProps;
	    memoizedProps;
	    memoizedState;
	    alternate;
	    flags;
	    subTreeFlags;
	    updateQueue;
	    constructor(tag, pendingProps, key) {
	        // 类型
	        this.tag = tag;
	        this.key = key;
	        this.ref = null;
	        this.stateNode = null; // 对应的dom节点或组件实例
	        this.type = null; // 节点类型 可以是函数组件 类组件 原生DOM元素
	        // 构成树状结构
	        this.return = null; // 指向父节点
	        this.sibling = null; // 指向节点的下一个兄弟节点
	        this.child = null; // 指向节点的第一个子节点
	        this.index = 0; // 索引
	        // 作为工作单元
	        this.pendingProps = pendingProps; // 表示节点的新属性，用于在协调过程中进行更新
	        this.memoizedProps = null; // 已经生效的props
	        this.memoizedState = null; // 更新完成后已经生效的状态
	        this.alternate = null; // 指向节点的备份节点，用于在协调过程中进行比较
	        this.flags = NoFlags; // 表示节点的副作用类型，如更新、插入、删除等
	        this.subTreeFlags = NoFlags; // 表示子节点的副作用类型，如更新、插入、删除等
	        this.updateQueue = null; // 表示节点的更新队列
	    }
	}
	class FiberRootNode {
	    container;
	    current;
	    finishedWork;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        // 将根节点的 stateNode 属性指向 FiberRootNode，用于表示整个 React 应用的根节点
	        hostRootFiber.stateNode = this;
	        // 指向更新完成之后的 hostRootFiber
	        this.finishedWork = null;
	    }
	}
	// 根据 FiberRootNode.current 创建一个新的 workInProgress 节点
	function createWorkInProgress(current, pendingProps) {
	    let workInProgress = current.alternate;
	    if (workInProgress === null) {
	        // mount 首屏渲染时 
	        workInProgress = new FiberNode(current.tag, pendingProps, current.key);
	        workInProgress.stateNode = current.stateNode;
	        // 建立双向关联
	        workInProgress.alternate = current;
	        current.alternate = workInProgress;
	    }
	    else {
	        // update 更新时
	        workInProgress.pendingProps = pendingProps;
	        // 将 effect 链表重置为空，以便在更新过程中记录新的副作用
	        workInProgress.flags = NoFlags;
	        workInProgress.subTreeFlags = NoFlags;
	    }
	    // 复制当前节点的大部分属性
	    workInProgress.type = current.type;
	    workInProgress.updateQueue = current.updateQueue;
	    workInProgress.child = current.child;
	    workInProgress.memoizedProps = current.memoizedProps;
	    workInProgress.memoizedState = current.memoizedState;
	    return workInProgress;
	}
	// 根据 DOM 节点创建新的 Fiber 节点
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        // 原生DOM节点
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('未定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	// 创建Update 实例
	function createUpdate(action) {
	    return {
	        action
	    };
	}
	// 创建UpdateQueue 实例
	function createUpdateQueue() {
	    return {
	        shared: {
	            pending: null
	        }
	    };
	}
	// 将Update 插入到UpdateQueue 中
	function enqueueUpdate(updateQueue, update) {
	    updateQueue.shared.pending = update;
	}
	// 消费UpdateQueue 中的Update
	function processUpdateQueue(baseState, pendingUpdate) {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            // 若 action 是回调函数：
	            result.memoizedState = action(baseState);
	        }
	        else {
	            // 若 action 是状态值：
	            result.memoizedState = action;
	        }
	    }
	    return result;
	}

	// 模拟实现构建 DOM 的函数
	// 真实函数要在不同的宿主环境中实现
	const createInstance = (type, props) => {
	    // TODO 处理props
	    const element = document.createElement(type);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    const element = document.createTextNode(content);
	    return element;
	};
	const appendChildToContainer = (child, parent) => {
	    parent.appendChild(child);
	};

	let nextEffect = null;
	function commitMutationEffects(finishedWork) {
	    nextEffect = finishedWork;
	    //深度优先遍历fiber树 寻找新的flags
	    while (nextEffect !== null) {
	        const child = nextEffect.child;
	        if ((nextEffect.subTreeFlags & MutationMask) !== NoFlags && child !== null) {
	            // 子节点存在 mutation阶段执行的flags
	            nextEffect = child;
	        }
	        else {
	            // 子节点不存在 mutation 阶段需要执行的 flags 或没有子节点
	            // 向上遍历
	            up: while (nextEffect !== null) {
	                // 处理当前节点的 flags
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    // 有兄弟节点 则遍历兄弟节点
	                    nextEffect = sibling;
	                    break up;
	                }
	                // 否则 向上返回遍历父节点
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	}
	function commitMutationEffectsOnFiber(finishedWork) {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= -3;
	    }
	    if ((flags & Update) !== NoFlags) {
	        // TODO Update
	        finishedWork.flags &= -5;
	    }
	    if ((flags & ChildDeletion) !== NoFlags) {
	        // TODO ChildDeletion
	        finishedWork.flags &= -9;
	    }
	}
	// 执行 DOM 插入操作，将 FiberNode 对应的 DOM 插入 parent DOM 中
	function commitPlacement(finishedWork) {
	    {
	        console.warn('执行Placement操作', finishedWork);
	    }
	    const hostParent = getHostParent(finishedWork);
	    if (hostParent !== null) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	}
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        else {
	            parent = parent.return;
	        }
	    }
	    {
	        console.warn('未找到hostParent');
	    }
	    return null;
	}
	function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(finishedWork.stateNode, hostParent);
	    }
	    else {
	        const child = finishedWork.child;
	        if (child !== null) {
	            appendPlacementNodeIntoContainer(child, hostParent);
	            let sibling = child.sibling;
	            while (sibling !== null) {
	                appendPlacementNodeIntoContainer(sibling, hostParent);
	                sibling = sibling.sibling;
	            }
	        }
	    }
	}

	// packages/shared/ReactSymbols.ts
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	// 表示普通的 React 元素，即通过 JSX 创建的组件或 DOM 元素
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	function ChildReconciler(shouldTrackEffects) {
	    // 处理单个 Element 节点的情况
	    // 对比 currentFiber 与 ReactElement
	    // 生成 workInProgress FiberNode
	    function reconcilerSingleElement(returnFiber, currentFiber, element) {
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    // 处理文本节点的情况
	    // 对比 currentFiber 与 ReactElement
	    // 生成 workInProgress FiberNode
	    function reconcilerSingleTextNode(returnFiber, currentFiber, content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    // 为 Fiber 节点添加更新 flags
	    function placeSingleChild(fiber) {
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    // 闭包，根据 shouldTrackSideEffects 返回不同 reconcileChildFibers 的实现
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        // 判断当前 fiber 的类型
	        // 单个 Element 节点
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcilerSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	                    break;
	            }
	        }
	        // 多个 Element 节点
	        if (Array.isArray(newChild)) {
	            // TODO: 暂时不处理
	            {
	                console.warn('未实现的 reconcile 类型', newChild);
	            }
	            // return reconcileChildrenArray(
	            //     returnFiber,
	            //     currentFiber,
	            //     newChild
	            // );
	        }
	        // 文本节点
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcilerSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        {
	            console.warn('未实现的 reconcile 类型', newChild);
	        }
	        return null;
	    };
	}
	// 组件的更新阶段中，追踪副作用
	const reconcileChildFibers = ChildReconciler(true);
	// 首屏渲染阶段中不追踪副作用，只对根节点执行一次 DOM 插入操作
	const mountChildFibers = ChildReconciler(false);

	// 比较并返回子 FiberNode
	function beginWork(workInProgress) {
	    switch (workInProgress.tag) {
	        case HostRoot:
	            return updateHostRoot(workInProgress);
	        case HostComponent:
	            return updateHostComponent(workInProgress);
	        case HostText:
	            return updateHostText();
	        default:
	            {
	                console.warn('beginWork 未实现的类型', workInProgress.tag);
	            }
	            break;
	    }
	}
	function updateHostRoot(workInProgress) {
	    // 根据当前节点和工作中节点的状态进行比较，处理属性等更新逻辑
	    const baseState = workInProgress.memoizedState;
	    const updateQueue = workInProgress.updateQueue;
	    const pending = updateQueue.shared.pending;
	    // 清空任务栈
	    updateQueue.shared.pending = null;
	    // 计算待更新状态的最新值
	    const { memoizedState } = processUpdateQueue(baseState, pending);
	    workInProgress.memoizedState = memoizedState;
	    //处理字节点的更新逻辑
	    const nextChildren = workInProgress.memoizedState;
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	}
	function updateHostComponent(workInProgress) {
	    const nextProps = workInProgress.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	}
	function updateHostText() {
	    return null;
	}
	// 对比子节点的 current FiberNode 与 子节点的 ReactElement
	// 生成子节点对应的 workInProgress FiberNode
	function reconcileChildren(workInProgress, children) {
	    // alternate 指向节点的备份节点，即 current
	    const current = workInProgress.alternate;
	    if (current !== null) {
	        // update
	        workInProgress.child = reconcileChildFibers(workInProgress, current?.child, children);
	    }
	    else {
	        // mount
	        workInProgress.child = mountChildFibers(workInProgress, null, children);
	    }
	}

	// 生成更新计划，计算和收集更新 flags
	function completeWork(workInProgress) {
	    const newProps = workInProgress.pendingProps;
	    const current = workInProgress.alternate;
	    switch (workInProgress.tag) {
	        case HostRoot:
	            bubbleProperties(workInProgress);
	            return null;
	        case HostComponent:
	            if (current !== null && workInProgress.stateNode !== null) ;
	            else {
	                // 首屏渲染阶段
	                // 1.构建DOM
	                const instance = createInstance(workInProgress.type);
	                // 2.将DOM插入到DOM树中
	                appendAllChildren(instance, workInProgress);
	                workInProgress.stateNode = instance;
	            }
	            bubbleProperties(workInProgress);
	            return null;
	        case HostText:
	            if (current !== null && workInProgress.stateNode !== null) ;
	            else {
	                // 首屏渲染阶段
	                // 1.构建DOM
	                const instance = createTextInstance(newProps.content);
	                workInProgress.stateNode = instance;
	            }
	            bubbleProperties(workInProgress);
	            return null;
	        default:
	            {
	                console.warn('未实现的completeWork情况', workInProgress);
	            }
	            break;
	    }
	}
	function appendAllChildren(parent, workInProgress) {
	    let node = workInProgress.child;
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            // 处理原生 DOM 元素节点或文本节点
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            // 递归处理其他类型的组件节点的子节点
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === workInProgress) {
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === workInProgress) {
	                return;
	            }
	            node = node.return;
	        }
	        // 处理下一个兄弟节点
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	// 收集更新 flags，将子 FiberNode 的 flags 冒泡到父 FiberNode 上
	function bubbleProperties(workInProgress) {
	    let subTreeFlags = NoFlags;
	    let child = workInProgress.child;
	    while (child !== null) {
	        subTreeFlags |= child.subTreeFlags;
	        subTreeFlags |= child.flags;
	        child.return = workInProgress;
	        child = child.sibling;
	    }
	    workInProgress.subTreeFlags |= subTreeFlags;
	}

	let workInProgress = null;
	function renderRoot(root) {
	    // 初始化 workInProgress 变量
	    prepareFreshStack(root);
	    do {
	        try {
	            // 深度优先遍历
	            workLoop();
	            break;
	        }
	        catch (error) {
	            console.warn('workLoop发生错误', error);
	            workInProgress = null;
	        }
	    } while (true);
	    // 创建根 Fiber 树的 Root Fiber
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    // 提交更新
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('开始提交阶段', finishedWork);
	    }
	    // 重置
	    root.finishedWork = null;
	    // 判断是否存在 3 个子阶段需要执行的操作
	    const subtreeHasEffect = (finishedWork.subTreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        // TODO beforeMutation
	        commitMutationEffects(finishedWork);
	        // Fiber 树切换，workInProgress 变成 current
	        root.current = finishedWork;
	        // TODO layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	// 初始化 workInProgress 变量
	function prepareFreshStack(root) {
	    workInProgress = createWorkInProgress(root.current, {});
	}
	//深度优先遍历，向下递归子节点
	function workLoop() {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    // 比较并返回子fiberNode
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next == null) {
	        // 没有子节点 则向上返回
	        completeUnitOfWork(fiber);
	    }
	    else {
	        // 有子节点 则向下深度遍历
	        workInProgress = next;
	    }
	}
	// 深度优先遍历，向下递归子节点
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        //生成更新计划
	        completeWork(node);
	        // 有兄弟节点 则遍历兄弟节点
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        // 否则 向上返回遍历父节点
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}
	//调度功能
	function scheduleUpdateOnFiber(fiber) {
	    const root = markUpdateFromFiberToRoot(fiber);
	    renderRoot(root);
	}
	// 从触发更新的节点向上遍历到 FiberRootNode
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    while (node.return !== null) {
	        node = node.return;
	    }
	    if (node.tag == HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}

	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	// 实现 ReactDOM.createRoot(root).render(<App />);
	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
